# This has to be a standalone script,
# because all other scripts depend on the tools we're about to install

Write-Host "Install third party powershell tools"
# Ask powershell if it's allowed to use the tool nuget to download packages
if( (Get-PackageProvider | Where-Object { $_.Name -eq "NuGet" }).Count -eq 0) {
	# It's missing, so tell powershell it should install it
	Write-Host "Configure powershell to use nuget to install libraries"
	Get-PackageProvider -Name "nuget" -Force
} else {
	Write-Host "Powershell already configured to use nuget"
}

# Ask powershell if it checks nuget.org when looking for third party libraries
if( (Get-PackageSource | Select-Object Name | Where-Object { $_.Name -eq 'NuGet' }).Count -eq 0 ) {
	# Tell powershell it should look at nuget.org when downloading packages
	Write-Host "Configure powershell to pull nuget libraries from nuget.org"			
	Register-PackageSource -Name Nuget -Location "http://www.nuget.org/api/v2" –ProviderName Nuget -Trusted
} else {
	Write-Host "Powershell already configured to pull nuget libraries from nuget.org"
}

# Install C# packages
foreach($package in @("NPOI", "EPPlus")) {
	# Ask powershell if $package is installed
	if( (Get-Package | Where-Object { $_.Name -eq $package }).Count -eq 0) {
		# Tell powershell to install the package $package from nuget
		Write-Host "Installing package $package"
		Install-Package -Name $package -Force
	} else {
		Write-Host "Package $package already installed"
	}
}

foreach($Module in @("Invoke-SqlCmd2")) {
	# Ask powershell if module is installed
	if( (Get-Command $Module).Count -eq 0) {
		# Tell powershell to install the module 
		Write-Host "Installing module $Module"
		Install-Module -Name $Module -Force
	} else {
		Write-Host "Module $Module already installed"
	}
}
